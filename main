#include <stdio.h>
#include <time.h>
#include <allegro5/allegro.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_primitives.h>


const float FPS = 60;
const int SCREEN_W = 1280;
const int SCREEN_H = 720;
const int WARRIOR_SIZE = 84;
float przeciwnicy[12][4];
float przeszkody[6][2];
int ile_przeciwnikow;
int ile_dziur; 
float level_movement;
enum MYKEYS {
	KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT
};

int Collision(int b1_x, int b1_y, int b1_w, int b1_h, int b2_x, int b2_y, int b2_w, int b2_h)
{
	if ((b1_x > b2_x + b2_w - 1) || // is b1 on the right side of b2?
		(b1_y > b2_y + b2_h - 1) || // is b1 under b2?
		(b2_x > b1_x + b1_w - 1) || // is b2 on the right side of b1?
		(b2_y > b1_y + b1_h - 1))   // is b2 under b1?
	{
		// no collision
		return 0;
	}

	// collision
	return 1;
}

void enemy_placement(int level)
{
	int i;
	time_t tt;
	int zarodek = time(&tt);
	srand(zarodek);

	if (level == 1)
	{
		ile_przeciwnikow = 4;
		level_movement = 2.0;
		
	}
	else if (level == 2)
	{
		ile_przeciwnikow = 6;
		level_movement = 3.0;
		
	}
	else if (level == 3)
	{
		ile_przeciwnikow = 8;
		level_movement = 4.0;
	}
	else if (level == 4)
	{
		ile_przeciwnikow = 10;
		level_movement = 5.0;
		
	}
	else if (level == 5)
	{
		ile_przeciwnikow = 12;
		level_movement = 6.0;
		
	}
	for (i = 0; i < ile_przeciwnikow; i++)
	{
		przeciwnicy[i][0] = rand() % 2;
		przeciwnicy[i][1] = (rand() % 1200) + 40;
		przeciwnicy[i][2] = (rand() % 610) + 42;
		przeciwnicy[i][3] = rand() % 2;
	}
}

 void hole_placement(int level)
{
	int j;
	time_t tt;
	int zarodek = time(&tt);
	srand(zarodek);
	
	if (level == 1)
	{
		ile_dziur = 3;

	}
	else if (level == 2)
	{
		ile_dziur = 4;

	}
	else if (level == 3)
	{
		ile_dziur = 5;

	}
	else if (level == 4)
	{
		ile_dziur = 6;

	}
	else if (level == 6)
	{
		ile_dziur = 7;

	}
	for (j = 0; j < ile_dziur; j++)
	{
		przeszkody[j][1] = (rand() % 1200) + 40;
		przeszkody[j][2] = (rand() % 520) + 100;
	}
} 

void enemy_movement()
{
	int i;
	for (i = 0; i<ile_przeciwnikow; i++)
		if (przeciwnicy[i][0] == 0)
		{
			przeciwnicy[i][1] -= level_movement;
			if (przeciwnicy[i][1] <= 0) przeciwnicy[i][0] = 1;
		}
		else
		{
			przeciwnicy[i][1] += level_movement;
			if (przeciwnicy[i][1] + 50 >= SCREEN_W) przeciwnicy[i][0] = 0;
		}


}


int main(int argc, char **argv)
{
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_EVENT_QUEUE *event_queue = NULL;
	ALLEGRO_KEYBOARD_STATE keyState;
	ALLEGRO_TIMER *timer = NULL;
	float warrior_x = 30;
	float warrior_y = 600;
	int next_level = 0;
	int new_enemy = 0;
	int new_hole = 0; 
	int i;
	int j;
	int background_img = 1;
	bool key[4] = { false, false, false, false };
	bool redraw = true;
	bool doexit = false;
	int kolizja = 0;


	if (!al_init()) {
		fprintf(stderr, "failed to initialize allegro!\n");
		return -1;
	}
	al_init_font_addon(); // initialize the font addon
	al_init_ttf_addon();// initialize the ttf (True Type Font) addon
	al_init_primitives_addon();
	al_install_keyboard(); //installing keyboard
	timer = al_create_timer(0.8 / FPS);
	if (!timer) {
		fprintf(stderr, "failed to create timer!\n");
		return -1;
	}
	if (!al_init_image_addon()) {
		fprintf(stderr, "Failed to initialize al_init_image_addon!\n");
		return -1;
	}

	display = al_create_display(SCREEN_W, SCREEN_H);
	if (!display) {
		fprintf(stderr, "failed to create displaystart!\n");
		return -1;
	}
	ALLEGRO_BITMAP	*warrior = al_load_bitmap("indiana.png");
	ALLEGRO_BITMAP  *background = NULL;
	ALLEGRO_BITMAP  *exit = NULL;
	warrior = al_load_bitmap("indiana.png");
	al_convert_mask_to_alpha(warrior, al_map_rgb(255, 255, 255));
	if (!warrior) {
		fprintf(stderr, "failed to create warrior!\n");
		al_destroy_display(display);
		al_destroy_timer(timer);
		return 0;
	}

	ALLEGRO_FONT *font = al_load_ttf_font("Artesana.ttf", 64, 0);
	ALLEGRO_FONT *fonttytul = al_load_ttf_font("ARRIBAAR.TTF", 100, 0);

	if (!font) {
		fprintf(stderr, "Could not load 'Artesana.ttf'.\n");
		return -1;
	}
	if (!fonttytul) {
		fprintf(stderr, "Could not load 'ARRIBAAR.TTF'.\n");
		return -1;
	}
	event_queue = al_create_event_queue();
	if (!event_queue) {
		fprintf(stderr, "failed to create event_queue!\n");
		al_destroy_display(display);
		return -1;
	}
	al_register_event_source(event_queue, al_get_display_event_source(display));
	al_register_event_source(event_queue, al_get_keyboard_event_source());
	al_clear_to_color(al_map_rgb(2, 147, 0));
	al_draw_text(fonttytul, al_map_rgb(223, 234, 18), SCREEN_W / 2, 80, ALLEGRO_ALIGN_CENTRE, "Indi w tarapatach!");
	al_draw_text(font, al_map_rgb(255, 255, 255), SCREEN_W / 2, 250, ALLEGRO_ALIGN_CENTRE, "1. Nowa gra");
	al_draw_text(font, al_map_rgb(255, 255, 255), SCREEN_W / 2, 400, ALLEGRO_ALIGN_CENTRE, "2. Wyjdz z gry");
	al_flip_display();
	while (1)
	{
		ALLEGRO_EVENT ev;
		ALLEGRO_TIMEOUT timeout;
		al_init_timeout(&timeout, 0.06);
		al_get_keyboard_state(&keyState);

		bool get_event = al_wait_for_event_until(event_queue, &ev, &timeout);

		if (get_event && ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}
		else if (al_key_down(&keyState, ALLEGRO_KEY_ESCAPE)) {
			break;
		}
		else if (al_key_down(&keyState, ALLEGRO_KEY_2)) {
			break;
		}
		else if (al_key_down(&keyState, ALLEGRO_KEY_1)) {
			background = al_load_bitmap("mapa1.png");
			if (!background)
			{
				fprintf(stderr, "failed to load background bitmap!\n");
				return -1;
			}
			exit = al_load_bitmap("exit.png");
			al_convert_mask_to_alpha(exit, al_map_rgb(255, 255, 255));
			if (!exit) {
				fprintf(stderr, "failed to create exit door!\n");
				al_destroy_display(display);
				al_destroy_timer(timer);
				return 0;
			}
			al_draw_bitmap(background, 0, 0, 0);
			al_set_target_bitmap(warrior);
			al_set_target_bitmap(exit);
			al_set_target_bitmap(al_get_backbuffer(display));

			event_queue = al_create_event_queue();
			if (!event_queue) {
				fprintf(stderr, "failed to create event_queue!\n");
				al_destroy_bitmap(warrior);
				al_destroy_display(display);
				al_destroy_timer(timer);
				return -1;
			}

			al_register_event_source(event_queue, al_get_display_event_source(display));

			al_register_event_source(event_queue, al_get_timer_event_source(timer));

			al_register_event_source(event_queue, al_get_keyboard_event_source());

			al_draw_bitmap(background, 0, 0, 0);

			al_flip_display();

			al_start_timer(timer);
			while (!doexit)
			{
				ALLEGRO_EVENT ev1;
				al_wait_for_event(event_queue, &ev1);

				if (ev1.type == ALLEGRO_EVENT_TIMER) {
					if (key[KEY_UP] && warrior_y >= 4.0) {
						warrior_y -= 4.0;
					}

					if (key[KEY_DOWN] && warrior_y <= SCREEN_H - WARRIOR_SIZE - 9.0) {
						warrior_y += 4.0;
					}

					if (key[KEY_LEFT] && warrior_x >= 4.0) {
						warrior_x -= 4.0;
					}

					if (key[KEY_RIGHT] && warrior_x <= SCREEN_W - WARRIOR_SIZE - 4.0) {
						warrior_x += 4.0;
					}
					redraw = true;
				}
				else if (ev1.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
					break;
				}
				else if (ev1.type == ALLEGRO_EVENT_KEY_DOWN) {
					switch (ev1.keyboard.keycode) {
					case ALLEGRO_KEY_UP:
						key[KEY_UP] = true;
						break;

					case ALLEGRO_KEY_DOWN:
						key[KEY_DOWN] = true;
						break;

					case ALLEGRO_KEY_LEFT:
						key[KEY_LEFT] = true;
						break;

					case ALLEGRO_KEY_RIGHT:
						key[KEY_RIGHT] = true;
						break;
					}
				}
				else if (ev1.type == ALLEGRO_EVENT_KEY_UP) {
					switch (ev1.keyboard.keycode) {
					case ALLEGRO_KEY_UP:
						key[KEY_UP] = false;
						break;

					case ALLEGRO_KEY_DOWN:
						key[KEY_DOWN] = false;
						break;

					case ALLEGRO_KEY_LEFT:
						key[KEY_LEFT] = false;
						break;

					case ALLEGRO_KEY_RIGHT:
						key[KEY_RIGHT] = false;
						break;

					case ALLEGRO_KEY_ESCAPE:
						doexit = true;
						break;
					}
				}

				if (next_level == 1)
				{
					warrior_x = 30;
					warrior_y = 600;
					background_img += 1;
					switch (background_img)
					{
					case 2:
						new_hole = 0; 
						new_enemy = 0;
						background = al_load_bitmap("mapa2.png");
						break;
					case 3:
						new_hole = 0;
						new_enemy = 0;
						background = al_load_bitmap("mapa3.png");
						break;
					case 4:
						new_hole = 0;
						new_enemy = 0;
						background = al_load_bitmap("mapa4.png");
						break;
					case 5:
						new_hole = 0;
						new_enemy = 0;
						background = al_load_bitmap("mapa5.png");
						break;
					default:
						background_img = 1;
						new_enemy = 0;
						new_hole = 0;
						background = al_load_bitmap("mapa1.png");
						break;
					}

				}
				if (new_enemy == 0 && new_hole == 0)
				{
					new_enemy = 1;
					new_hole = 1;
					enemy_placement(background_img);
					hole_placement(background_img); 
				}
				enemy_movement();
				next_level = Collision(warrior_x + 5, warrior_y, 60, 98, 1160, 40, 50, 85);
				if (redraw && al_is_event_queue_empty(event_queue))
				{
					redraw = false;
					for (i = 0; i < ile_przeciwnikow; i++)
					{
						printf("%i :: x: %.2f :: y: %.2f\n", i, przeciwnicy[i][1], przeciwnicy[i][2]);
						if (przeciwnicy[i][3] == 0) al_draw_filled_rectangle(przeciwnicy[i][1], przeciwnicy[i][2], przeciwnicy[i][1] + 50, przeciwnicy[i][2] + 50, al_map_rgb(160, 82, 45));
						else al_draw_filled_rectangle(przeciwnicy[i][1], przeciwnicy[i][2], przeciwnicy[i][1] + 50, przeciwnicy[i][2] + 50, al_map_rgb(218, 165, 32));
						if (kolizja != 1)
						{
							kolizja = Collision(warrior_x - 6, warrior_y, 60, 98, przeciwnicy[i][1], przeciwnicy[i][2], 50, 50);
						}
					}
					for (j = 0; j < ile_dziur; j++)
					{
						al_draw_filled_rectangle(przeszkody[j][1], przeszkody[j][2], przeszkody[j][1] + 20, przeszkody[j][2] + 20, al_map_rgb(0, 0, 0));
						if (kolizja != 1)
						{
							kolizja = Collision(warrior_x - 16, warrior_y, 40, 85, przeszkody[j][1] - 34, przeszkody[j][2], 25, 15);
						}
					} 
					if (kolizja == 1)
					{
						warrior_x = 30;
						warrior_y = 600;
						kolizja = 0;
					}


					al_draw_bitmap(exit, 1100, 40, 0);
					al_draw_bitmap(warrior, warrior_x, warrior_y, 0);
					al_flip_display();
					al_draw_bitmap(background, 0, 0, 0);

				}
			}


		}
	}

	al_destroy_bitmap(warrior);
	al_destroy_bitmap(exit);
	al_destroy_bitmap(background);
	al_destroy_timer(timer);
	al_destroy_display(display);
	al_destroy_event_queue(event_queue);
	return 0;
}

